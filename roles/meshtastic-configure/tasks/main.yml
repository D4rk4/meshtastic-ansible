- name: Install meshtastic
  ansible.builtin.pip:
    name:
      - meshtastic
      - pytap2
    state: latest
    executable: pip3
    extra_args: "{{ (ansible_distribution == 'Kali' or (ansible_distribution == 'Debian' and ansible_distribution_release == 'bookworm')) | ternary('--break-system-packages', omit) }}"

- name: Try to get node name
  ansible.builtin.shell: meshtastic --info | grep Owner | awk '{print $2}'
  register: msh_name_detect
  when: "msh.name is not defined and name is not defined"
  until: "msh_name_detect is not failed"
  retries: 2
  delay: 15
  tags: ['config', 'common', 'tty', 'admin', 'router', 'mqtt']

- name: Redefine node name (detected)
  set_fact:
    msh_name: "{{ msh_name_detect.stdout }}"
  when: "msh_name_detect is defined and msh.name is not defined and name is not defined"
  tags: ['config', 'common', 'tty', 'admin', 'router', 'mqtt']

- name: Redefine node name (manual)
  set_fact:
    msh_name: "{{ name }}"
  when: "name is defined and msh.name is not defined"
  tags: ['config', 'common', 'tty', 'admin', 'router', 'mqtt']

- name: Redefine node name (from inventory)
  set_fact:
    msh_name: "{{ msh.name }}"
  when: "msh.name is defined"
  tags: ['config', 'common', 'tty', 'admin', 'router', 'mqtt']

- name: Reseting device to factory defaults
  ansible.builtin.shell: meshtastic --factory-reset --reboot
  register: res
  until: "res is not failed"
  retries: 6
  delay: 15
  tags: ['config', 'factory', 'never']

- name: Setting up working channel and region
  ansible.builtin.shell: meshtastic --set lora.use_preset 1 --set lora.modem_preset {{ msh.channel }} --set lora.region {{ msh.region }} --set lora.hop_limit {{ msh.maxhops }}
  register: res
  until: "res is not failed"
  retries: 6
  delay: 15
  tags: ['config', 'radio']

- name: Setting up node name
  ansible.builtin.shell: meshtastic --set-owner {{ msh_name }} --set-owner-short {{ msh_name[-3:] | regex_replace('-', '0') }}
  when: "msh_name is defined"
  register: res
  until: "res is not failed"
  retries: 6
  delay: 15
  tags: ['config', 'common']

- name: Setting up common settings
  ansible.builtin.shell: meshtastic --set position.position_broadcast_secs 150 \
    --set position.gps_update_interval 15 \
    --set display.screen_on_secs 120 \
    --set display.compass_north_top true \
    --set display.gps_format DMS \
    --set power.sds_secs 7200
    --set position.position_broadcast_smart_enabled true \
    --set telemetry.device_update_interval 60 \
    --set telemetry.environment_update_interval 120 \
    --set telemetry.environment_measurement_enabled true
  register: res
  until: "res is not failed"
  retries: 6
  delay: 15
  tags: ['config', 'common']

- name: Getting hardware model
  ansible.builtin.shell: meshtastic --info | grep -Po "(?<='hwModel':\ ')[^'},]+" | head -1
  register: msh_model_detect
  when: "hw is not defined"
  until: "msh_model_detect is not failed"
  retries: 6
  delay: 15
  tags: ['config', 'tty']

- name: Redefine model var (detected)
  set_fact:
    msh_model: "{{ msh_model_detect.stdout }}"
  when: "hw is not defined"
  tags: ['config', 'tty']

- name: Redefine model var (manual)
  set_fact:
    msh_model: "{{ hw }}"
  when: "hw is defined"
  tags: ['config', 'tty']

- name: Connfiguring serial module (RAK4631)
  # Brother EP-44 and Minitel comon settings (untested)
  ansible.builtin.shell: meshtastic --set serial.enabled true \
    --set serial.mode TEXTMSG \
    --set serial.baud BAUD_1200 \
    --set serial.rxd 15 \
    --set serial.txd 16 \
    --set serial.echo true
  when: "msh_model == 'RAK4631' and 'TTY' in msh_name"
  register: res
  until: "res is not failed"
  retries: 6
  delay: 15
  tags: ['config', 'common', 'tty']

- name: Connfiguring serial module (TLORA_V1)
  # Brother EP-44 and Minitel comon settings (untested)
  ansible.builtin.shell: meshtastic --set serial.enabled true \
    --set serial.mode TEXTMSG \
    --set serial.baud BAUD_1200 \
    --set serial.rxd 12 \
    --set serial.txd 13 \
    --set serial.echo true
  when: "msh_model == 'TLORA_V1' and 'TTY' in msh_name"
  register: res
  until: "res is not failed"
  retries: 6
  delay: 15
  tags: ['config', 'common', 'tty']


- name: Setting up admin/config role
  ansible.builtin.shell: meshtastic \
    --seturl "{{ msh.url }}" \
    --ch-index 1 --ch-enable
  when: "'CTL-' in msh_name or '-CTL-' in msh_name"
  register: res
  until: "res is not failed"
  retries: 6
  delay: 15
  tags: ['config', 'admin']

- name: Setting up router role
  ansible.builtin.shell: meshtastic \
    --set device.role {{ msh.rr.role }} \
    --set lora.override_duty_cycle true
    --set position.position_broadcast_smart_enabled false \
    --set lora.tx_power 27
  when: "'GW-' in msh_name or 'RR-' in msh_name"
  register: res
  until: "res is not failed"
  retries: 6
  delay: 15
  tags: ['config', 'router']

- name: Fine tune params for ROUTER/GATEWAY role (common)
  ansible.builtin.shell: meshtastic \
    --set store_forward.enabled "{{ msh.sf.enabled }}" \
    --set store_forward.records 50 \
    --seturl "{{ msh.url }}" \
    --ch-index 1 --ch-enable \
    --set auto_screen_carousel_secs 5 \
    --set bluetooth.enabled false
  when: "'GW-' in msh_name or 'RR-' in msh_name"
  register: res
  until: "res is not failed"
  retries: 6
  delay: 15
  tags: ['config', 'router']

- name: Fine tune params for ROUTER role (position)
  ansible.builtin.shell: meshtastic \
    --set position.gps_attempt_time 3600 \
    --set position.gps_update_interval "{{ msh.rr.position.gps.upd }}" \
    --set position.position_broadcast_secs "{{ msh.rr.position.broadcast.sec }}"
  when: "'GW-' in msh_name or 'RR-' in msh_name"
  register: res
  until: "res is not failed"
  retries: 6
  delay: 15
  tags: ['config', 'router']

- name: Fine tune params for ROUTER role (power)
  ansible.builtin.shell: meshtastic \
    --set power.mesh_sds_timeout_secs 4294967295 \
    --set power.min_wake_secs {{ msh.rr.power.wake }} \
    --set power.sds_secs {{ msh.rr.power.sds }} \
    --set telemetry.device_update_interval 30 \
    --set telemetry.environment_update_interval 120 \
    --set power.on_battery_shutdown_after_secs 0
  when: "'GW-' in msh_name or 'RR-' in msh_name"
  register: res
  until: "res is not failed"
  retries: 6
  delay: 15
  tags: ['config', 'router']


- name: Setting up low powered node
  ansible.builtin.shell: meshtastic \
    --set power.is_power_saving true \
    --set bluetooth.enabled false \
    --set power.min_wake_secs "{{ msh.rr.lpower.wake }}" \
    --set power.sds_secs "{{ msh.rr.lpower.sds }}" \
    --set telemetry.device_update_interval 600 \
    --set telemetry.environment_update_interval 600 \
    --set telemetry.environment_measurement_enabled true
  when: "'-LP-' in msh_name"
  register: res
  until: "res is not failed"
  retries: 6
  delay: 15
  tags: ['config', 'router']


- name: Setting up tracker role
  ansible.builtin.shell: meshtastic \
    --set device.role TRACKER \
    --set bluetooth.enabled true \
    --set wifi.enabled false \
    --set lora.tx_power 27 \
    --set power.is_power_saving false \
    --set position.gps_attempt_time 3600 \
    --set position.gps_update_interval 15 \
    --set position.position_broadcast_secs 30 \
    --set telemetry.device_update_interval 30 \
    --set telemetry.environment_update_interval 30 \
    --set telemetry.environment_measurement_enabled true \
    --pos-fields ALTITUDE SATINVIEW TIMESTAMP HEADING SPEED
  when: "'TRK-' in msh_name"
  register: res
  until: "res is not failed"
  retries: 6
  delay: 15
  tags: ['config', 'tracker']


- name: Setting up Internet Gateway role (con)
  ansible.builtin.shell: meshtastic \
    --set network.wifi_ssid {{ msh.wifi.ssid }} \
    --set network.wifi_psk {{ msh.wifi.pwd }} \
    --set network.wifi_enabled true
  when: "msh.wifi.ssid is defined and msh.wifi.pwd is defined"
  register: res
  until: "res is not failed"
  retries: 6
  delay: 15
  tags: ['config', 'wifi']

- name: Setting up Internet Gateway role (mqtt)
  ansible.builtin.shell: meshtastic \
    --set mqtt.enabled true \
    --set mqtt.address {{ msh.mqtt.address }} \
    --set mqtt.json_enabled {{ msh.mqtt.json }} \
    --set mqtt.encryption_enabled {{ msh.mqtt.encryption }} \
    --set mqtt.username {{ msh.mqtt.username }} \
    --set mqtt.password {{ msh.mqtt.password }} \
    --ch-set downlink_enabled true --ch-index 0 \
    --ch-set uplink_enabled true --ch-index 0 --reboot
  when: "'GW-' in msh_name"
  register: res
  until: "res is not failed"
  retries: 6
  delay: 15
  tags: ['config', 'mqtt']

- name: Disable  mqtt for router role
  ansible.builtin.shell: meshtastic \
    --set mqtt.enabled false \
  when: "'RR-' in msh_name"
  register: res
  until: "res is not failed"
  retries: 6
  delay: 15
  tags: ['config', 'mqtt']

- name: Setting up fixed node position
  ansible.builtin.shell: meshtastic \
   --set position.fixed_position true \
   --setlat {{ msh.lat }} --setlon {{ msh.lon}}
  when: "msh.lat is defined and msh.lon is defined"
  register: res
  until: "res is not failed"
  retries: 6
  delay: 15
  tags: ['config', 'gps']

- name: Setting up maximum hops
  ansible.builtin.shell: meshtastic  --set lora.hop_limit {{ msh.maxhops }}
  register: res
  until: "res is not failed"
  retries: 6
  delay: 15
  tags: ['config', 'radio', 'router']

- name: Fine tune params for ROUTER role (again, for sure)
  ansible.builtin.shell: meshtastic \
    --set power.mesh_sds_timeout_secs 4294967295 \
    --set power.min_wake_secs {{ msh.rr.power.wake }} \
    --set power.sds_secs {{ msh.rr.power.sds }} \
    --set device.role {{ msh.rr.role }}
  when: "'GW-' in msh_name or 'RR-' in msh_name"
  register: res
  until: "res is not failed"
  retries: 6
  delay: 15
  tags: ['config', 'router']


- name: Setting up Internet Gateway role (mqtt, again)
  ansible.builtin.shell: meshtastic \
    --set mqtt.enabled true \
    --set mqtt.address {{ msh.mqtt.address }} --reboot
  when: "'GW-' in msh_name"
  register: res
  until: "res is not failed"
  retries: 6
  delay: 15
  tags: ['config', 'mqtt']

- name: Setting up fixed BT pin
  ansible.builtin.shell: meshtastic \
   --set bluetooth.enabled true \
   --set bluetooth.fixed_pin {{ msh.rr.bt.pin }}
  when: "msh.rr.bt.pin is defined and 'RR-' in msh_name"
  register: res
  until: "res is not failed"
  retries: 6
  delay: 15
  tags: ['config', 'router']


- name: Rebooting node
  ansible.builtin.shell: meshtastic --reboot
  register: res
  until: "res is not failed"
  retries: 6
  delay: 15
  tags: ['config', 'reboot', 'radio', 'router']


